<?php
namespace Application\Model;
 
use Zend\EventManager\AbstractListenerAggregate;
use Zend\EventManager\EventManagerInterface;
use Zend\Mvc\MvcEvent;
use Zend\Cache\Storage\Adapter\Filesystem;
 
class CacheListener extends AbstractListenerAggregate {
 
    protected $listeners = array();
    protected $cacheService;
 
    public function __construct(Filesystem $cacheService) {
    // We store the cache service generated by Zend\Cache from the service manager
        $this->cacheService = $cacheService;
    }
 
    public function attach(EventManagerInterface $events, $priotity = 1) {
    // The AbstractListenerAggregate we are extending from allows us to attach our even listeners
        $this->listeners[] = $events->attach(MvcEvent::EVENT_ROUTE, array($this, 'getCache'), -1000);
        $this->listeners[] = $events->attach(MvcEvent::EVENT_RENDER, array($this, 'saveCache'), -10000);
    }
 
    public function getCache(MvcEvent $event) {
        $match = $event->getRouteMatch();
     
    // is valid route?
        if (!$match) {
            return;
        }
     
    // does our route have the cache flag set to true? 
        if ($match->getParam('cache')) {
            $cacheKey = $this->genCacheName($match, $event->getRequest());
 
        // get the cache page for this route
            $data = $this->cacheService->getItem($cacheKey);
         
        // ensure we have found something valid
            if ($data !== null) {
                $response = $event->getResponse();
                $response->setContent($data);
 
                return $response;
            }
        }
    }
 
    public function saveCache(MvcEvent $event) {
        $match = $event->getRouteMatch();
 
    // is valid route?
        if (!$match) {
            return;
        }
     
    // does our route have the cache flag set to true? 
        if ($match->getParam('cache')) {
        	$response = $event->getResponse();
			$data = $response->getContent();
 
			$cacheKey = $this->genCacheName($match, $event->getRequest());
			$this->cacheService->setItem($cacheKey, $data);
        }
    }

    protected function genCacheName($match, $request) {
    	$cacheName = 'cache_' . str_replace('/', '-', $match->getMatchedRouteName() . '-'
    			. $match->getParam('action') . '-'
    			. md5(serialize($match->getParams())));
    	
    	if ($request->isGet())
    		$cacheName .= '-' . md5(serialize($request->getQuery()));
    	
    	return $cacheName;
    }
}
