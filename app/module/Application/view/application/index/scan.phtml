<?=
	$this->headLink()
    	->prependStylesheet($this->basePath('css/cute.css'));
?>

<script>
var	breadcrumbsUrls;
var emplacement = "<?= $this->escapeHtml($data['emplacement']) ?>";

$(function(){
	"use strict";
	
	var filemanager = $('.filemanager'),
		breadcrumbs = $('.breadcrumbs'),
		fileList = filemanager.find('.data');

	//var currentPath = '';

	var folders = [],
		files = [];

	// This event listener monitors changes on the URL. We use it to
	// capture back/forward navigation in the browser.
// 	$(window).on('hashchange', function(){
// 		goto(window.location.hash);
// 		// We are triggering the event. This will execute 
// 		// this function on page load, so that we show the correct folder:
// 	}).trigger('hashchange');

	// Hiding and showing the search box
	filemanager.find('.search').click(function(){
		var search = $(this);
		search.find('span').hide();
		search.find('input[type=search]').show().focus();
	});

	// Listening for keyboard input on the search field.
	// We are using the "input" event which detects cut and paste
	// in addition to keyboard input.
	filemanager.find('input').on('input', function(e){
		folders = [];
		files = [];

		var value = this.value.trim();
		if(value.length) {
			filemanager.addClass('searching');

			// Update the hash on every key stroke
			//window.location.hash = 'search=' + value.trim();
			//window.location = url;
		} else {
			filemanager.removeClass('searching');
			//window.location.hash = encodeURIComponent(currentPath);
		}
	}).on('keyup', function(e){
		// Clicking 'ESC' button triggers focusout and cancels the search
		var search = $(this);

		//ESC
		if(e.keyCode === 27) {
			search.hide();
		}

		//Enter
		if(e.keyCode === 13) {
			var dir = $.urlParam('dir');
			dir = decodeURIComponent(dir);
			//search.trigger('focusout');
			var value = this.value.trim();
			var url = "<?php echo $this->basePath('application/scan?'); ?>" + $.param({dir: dir, search: value.trim()});
			window.location = url;
		}
	});

	// Clicking on folders
	fileList.on('click', 'li.folders', function(e){
		e.preventDefault();

		var folder = $(this).find('a.folders');
		var nextDir = folder.attr('href');
		var empl = folder.data('empl');
		if(filemanager.hasClass('searching')) {
			// Building the breadcrumbs
			breadcrumbsUrls = generateBreadcrumbs(nextDir);

			filemanager.removeClass('searching');
			filemanager.find('input[type=search]').val('').hide();
			filemanager.find('span').show();
		} else {
			breadcrumbsUrls.push(nextDir);
		}

		//window.location.hash = encodeURIComponent(nextDir);
		var url = "<?php echo $this->basePath('application/scan?'); ?>" + $.param({dir: nextDir, empl: empl});
		window.location = url;
		currentPath = nextDir;
	});

	// Clicking on breadcrumbs
	breadcrumbs.on('click', 'a', function(e){
		e.preventDefault();

		var index = breadcrumbs.find('a').index($(this)),
			nextDir = breadcrumbsUrls[index];

		breadcrumbsUrls.length = Number(index);
		//window.location.hash = encodeURIComponent(nextDir);
		var url = "<?php echo $this->basePath('application/scan'); ?>";

		if (index > 0) {
			nextDir = nextDir.split('/').slice(1).join('/');
			url += '?' + $.param({dir: nextDir, empl: emplacement});
		}
		
		window.location = url;
	});
	
	// Splits a file path and turns it into clickable breadcrumbs
	function generateBreadcrumbs(nextDir) {
		nextDir = '[Empl0]/' + nextDir;
		var path = nextDir.split('/').slice(0);
		for(var i = 1; i < path.length; i++) {
			path[i] = path[i-1] + '/' + path[i];
		}
		return path;
	}
	
	// Locates a file by path
	function searchByPath(dir) {
		var path = dir.split('/'),
			demo = response,
			flag = 0;
	
		for(var i=0;i<path.length;i++){
			for(var j=0;j<demo.length;j++){
				if(demo[j].name === path[i]){
					flag = 1;
					demo = demo[j].items;
					break;
				}
			}
		}
	
		demo = flag ? demo : [];
		return demo;
	}
	
	// Recursively search through the file tree
	function searchData(data, searchTerms) {
		data.forEach(function(d){
			if(d.type === 'folder') {
				searchData(d.items,searchTerms);
	
				if(d.name.toLowerCase().match(searchTerms)) {
					folders.push(d);
				}
			} else if(d.type === 'file') {
				if(d.name.toLowerCase().match(searchTerms)) {
					files.push(d);
				}
			}
		});
		
		return {folders: folders, files: files};
	}
	
	// This function escapes special html characters in names
	function escapeHTML(text) {
		return text.replace(/\&/g,'&amp;').replace(/\</g,'&lt;').replace(/\>/g,'&gt;');
	}
	
	// Convert file sizes from bytes to human readable units
	function bytesToSize(bytes) {
		var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
		if (bytes == 0) return '0 Bytes';
		var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
		return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
	}

	// Generate the breadcrumbs
	var url = '';
	breadcrumbsUrls = generateBreadcrumbs("<?= $this->escapeHtml($data['path']) ?>");

	if(filemanager.hasClass('searching')){
		url = '<span>Search results: </span>';
		fileList.removeClass('animated');
	} else {
		fileList.addClass('animated');
		breadcrumbsUrls.forEach(function (u, i) {
			var name = u.split('/');

			if (i !== breadcrumbsUrls.length - 1) {
				url += '<a href="'+u+'"><span class="folderName">' + name[name.length-1] + '</span></a> <span class="arrow">→</span> ';
			} else {
				url += '<span class="folderName">' + name[name.length-1] + '</span>';
			}
		});
	}

	breadcrumbs.text('').append(url);

	// Show the generated elements
	fileList.css({display:'inline-block'});

	$("#scanButton").click(function() {
		var search = window.location.search;
		search = search.replace(/\?clear|&clear/gi, '');
		
		if (search.length === 0)
			search = "?clear";
		else
			search += "&clear";
		
		window.location.href = window.location.href.replace( /[\?#].*|$/, search);
    });

	// Initialisation players
	initPlayers();
});

//Test des éléments visibles
// $(document).on('DOMContentLoaded DOMMouseScroll mouseup', function() {
// 	$('li.files').each(function(key, elt) {
// 		if (isElementInViewport(elt)) {
// 			$(elt).css('border', '1px solid green');
// 			initPlayers();
// 		} else
// 			$(elt).css('border', '1px solid red');
// 	});
// });

var generateVideoPreview = function(player, duration) {
	console.log(player.id() + ' generateVideoPreview duration=' + duration);
	var video_id = player.el();
	var file = $(video_id).find('video').attr('src');

	return $.ajax({
        type: "GET",
        url: "generateVideoPreview",
        data: { file: file, duration: duration},
    });
};

var checkVideoPreviewExists = function(player) {
	console.log(player.id() + ' checkVideoPreviewExists');
	var video_id = player.el();
	var file = $(video_id).find('video').attr('src');

	return $.ajax({
        type: "GET",
        url: "checkVideoPreviewExists",
        data: { file: file },
    });
};

var showVideoPreview = function(player) {
	//Afficher la préview si le pointeur est dessus et hors plein écran
	if (!player.isFullscreen() && $('#' + player.id() + ':hover').length !== 0) {
		//Lancer preview
		player.src($(player).data('preview'));
		player.loop(true);
		player.play();
	}
};

var removePreviewIcon = function(player) {
	//Supprimer l'icône de génération de la preview
	var name = $(player.el()).prevAll('span.name');
	$(name).find('i').remove();
};

$.urlParam = function(name){
	var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
	return 0 || (results && results[1]);
};

var generatePreview = function(player) {
	if (!player.isFullscreen()
			&& $(document).data('requestRunning') !== player.id()) {
		console.log(player.id() + ' mouseover');
		player.controls(false);

		//Si preview absente la générer
		if ($(player).data('preview') === undefined) {
			//Vérifier existence de la preview
			$.when(checkVideoPreviewExists(player))
				.then(function(data) {
					if (data.return_value === true) {
						//Sauvegarde chemin de la preview vidéo
						$(player).data('preview', data.file);
						//Preview déjà créée on l'affiche
						showVideoPreview(player);
					} else {
						//Génération preview si une génération n'est pas déjà en cours
						if ($(document).data('requestRunning')) {
					        return;
					    } else
							$(document).data('requestRunning', player.id());

						//Icone de génération preview
						var name = $(player.el()).closest('li').find('span.name');
						var fa_refresh = $(name).find('> i');
						$(fa_refresh).addClass('fa-spin');
						
						var deferred = $.Deferred();
						var promise = deferred.promise();
						//Générer la preview video
						promise
							.then(function(){ return getVideoDuration(player); })
							.then(function(data){
								var duration = Math.trunc(data.duration);
								return generateVideoPreview(player, duration);
							})
							.then(function(data) {
								//Sauvegarde chemin de la preview vidéo
								$(player).data('preview', data.file);
								//Affichage preview
								$(fa_refresh).css('color', 'green').removeClass('fa-spin');
								//removePreviewIcon(player);
								$(player).data('hasPreview', true);
								showVideoPreview(player);

								$(document).data('requestRunning', "");
							});
		
						deferred.resolve();
					}
				});
		} else {
			//Preview déjà créée on l'affiche
			showVideoPreview(player);
		}
	}
};

var isElementInViewport = function(el) {
    //special bonus for those using jQuery
    if (typeof jQuery === "function" && el instanceof jQuery) {
        el = el[0];
    }

    var rect = el.getBoundingClientRect();

    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */
        rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
    );
};

//Initialisation players
var initPlayers = function() {
	$('li.files img').each(function(key, elt) {
		if (/*isElementInViewport(elt) &&*/ !$(elt).hasClass('vjs-tech')) {
			//var player = videojs(elt);
			var player = $(elt);

			//Affichage des séquences d'images lors du déplacement de la souris sur la vidéo
			player.on('mousemove', function(event) {
				getThumbAtMouse(player, player, event, addPoster);
			});
	
// 			player.on('mouseleave', function(){
// 				//if ($(player).data('hasPreview') === true && !player.isFullscreen()){
// 					console.log(player.id() + ' mouseleave');
// 					player.pause();
// 					//Restitution chemin vidéo
// 					player.src($(player).data('src'));
// 					player.controls(true);
// 				//}
// 			});
	
// 			player.on('click', function(evt){
// 				if (!player.isFullscreen()) {
// 					var time = $(player).data('time');
// 					var videoType = $(player.el()).data('type');
// 					var src = $(player).data('src');
// 					if (videoType === 'mp4') {
// 						evt.preventDefault();
// 						player.requestFullscreen();
// 						player.controls(true);
// 						player.src(src);
// 						player.play();
// 						player.currentTime(time);
// 					} else {
// 						window.location = src;
// 					}
// 				}
// 			});

			player.on('click', function(evt) {
				var path = $(player).attr('data-src');
				var time = $(player).data('time');

				startVideoTranscode(path, time, true)
					.then(function() {
						var params = '?path=' + encodeURIComponent(path) + '&time=' + time;
						var url = 'showPlayer' + params;
						window.open(url);
					});
			});

		}

	});

	//$('.vjs-loading-spinner').hide();
};

</script>

<div class="filemanager">
	<button id='scanButton' type="button" class="btn btn-default">Rescan folder</button>

	<div class="search">
		<input type="search" placeholder="Find a file.." />
	</div>

	<div class="breadcrumbs"></div>

	<ul class="data">
		<?php
			$idx = 0;
			foreach ($this->data['items'] as $file):
				$path = $this->escapeHtml($file['path']);
				$name = $this->escapeHtml($file['name']);
				$thumb = isset($file['thumb']) ? $this->escapeHtml($file['thumb']) : null;
				$pos = strrpos($name, '.');
				$fileType = ($pos !== false) ? substr($name, $pos + 1) : "";
				$empl = $this->escapeHtml($file['emplacement']);
		?>
			<?php
				if ($file['type'] === 'folder'):
					$items = $this->escapeHtml($file['items']);
					if ($items === 1) {
						$items .= ' item';
					} else if($items > 1) {
						$items .= ' items';
					} else {
						$items = 'Empty';
					}
			?>
				<li class="folders">
					<a href="<?= $path ?>" title="<?= $path ?>" data-empl="<?= $empl ?>" class="folders">
						<span class="icon folder full"></span>
						<span class="name"><?= $name ?></span>
						<span class="details"><?= $items ?></span>
					</a>
				</li>
			<?php
				else:
				$size = $this->escapeHtml($file['size']);
			?>
				<?php if ($thumb !== null): ?>
					<li class="files">
						<span class="name vid"><?= $name ?></span>
						<span class="details vid"><?= $size ?></span>
						<img id="video<?= $idx++ ?>"
							src="<?= $thumb ?>" data-type="<?= $fileType ?>"
							data-src="<?= $path ?>">
					</li>
				<?php else: ?>
					<li class="files">
						<a href="<?= $path ?>" title="<?= $path ?>" class="files">
							<span class='icon file f-<?= $fileType ?>'><?= $fileType ?></span>
							<span class="name"><?= $name ?></span>
							<span class="details"><?= $size ?></span>
						</a>
					</li>
				<?php endif; ?>
			<?php endif; ?>
		<?php endforeach; ?>
	</ul>

	<div class="nothingfound">
		<div class="nofiles"></div>
		<span>No files here.</span>
	</div>

</div>
