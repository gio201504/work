<?=
	$this->headLink()
    	->prependStylesheet($this->basePath('css/cute.css'))	
		->prependStylesheet($this->basePath('css/videojs.thumbnails.css'))
    	->prependStylesheet($this->basePath('css/video-js.css'));
	
    $this->headScript()
    	->prependFile($this->basePath('js/videojs.thumbnails.js'))
    	->prependFile($this->basePath('js/videojs-ie8.min.js'))
    	->prependFile($this->basePath('js/video.js'));
?>

<script>

$(function(){
	
	var filemanager = $('.filemanager'),
		breadcrumbs = $('.breadcrumbs'),
		fileList = filemanager.find('.data');

	var data = <?= $this->data; ?>;
	var response = [data],
		currentPath = '',
		breadcrumbsUrls = [];

	var folders = [],
		files = [];

	// This event listener monitors changes on the URL. We use it to
	// capture back/forward navigation in the browser.
	$(window).on('hashchange', function(){
		goto(window.location.hash);
		// We are triggering the event. This will execute 
		// this function on page load, so that we show the correct folder:
	}).trigger('hashchange');

	// Hiding and showing the search box
	filemanager.find('.search').click(function(){
		var search = $(this);
		search.find('span').hide();
		search.find('input[type=search]').show().focus();
	});

	// Listening for keyboard input on the search field.
	// We are using the "input" event which detects cut and paste
	// in addition to keyboard input.
	filemanager.find('input').on('input', function(e){
		folders = [];
		files = [];

		var value = this.value.trim();
		if(value.length) {
			filemanager.addClass('searching');

			// Update the hash on every key stroke
			window.location.hash = 'search=' + value.trim();
		} else {
			filemanager.removeClass('searching');
			window.location.hash = encodeURIComponent(currentPath);
		}
	}).on('keyup', function(e){
		// Clicking 'ESC' button triggers focusout and cancels the search
		var search = $(this);

		if(e.keyCode == 27) {
			search.trigger('focusout');
		}
	}).focusout(function(e){
		// Cancel the search
		var search = $(this);
		if(!search.val().trim().length) {
			window.location.hash = encodeURIComponent(currentPath);
			search.hide();
			search.parent().find('span').show();
		}
	});

	// Clicking on folders
	fileList.on('click', 'li.folders', function(e){
		e.preventDefault();

		var nextDir = $(this).find('a.folders').attr('href');
		if(filemanager.hasClass('searching')) {
			// Building the breadcrumbs
			breadcrumbsUrls = generateBreadcrumbs(nextDir);

			filemanager.removeClass('searching');
			filemanager.find('input[type=search]').val('').hide();
			filemanager.find('span').show();
		} else {
			breadcrumbsUrls.push(nextDir);
		}

		window.location.hash = encodeURIComponent(nextDir);
		currentPath = nextDir;
	});

	// Clicking on breadcrumbs
	breadcrumbs.on('click', 'a', function(e){
		e.preventDefault();

		var index = breadcrumbs.find('a').index($(this)),
			nextDir = breadcrumbsUrls[index];

		breadcrumbsUrls.length = Number(index);
		window.location.hash = encodeURIComponent(nextDir);
	});

	// Navigates to the given hash (path)
	function goto(hash) {
		hash = decodeURIComponent(hash).slice(1).split('=');
	
		if (hash.length) {
			var rendered = '';
	
			// if hash has search in it
			if (hash[0] === 'search') {
				filemanager.addClass('searching');
				rendered = searchData(response, hash[1].toLowerCase());
	
				if (rendered.length) {
					currentPath = hash[0];
					render(rendered);
				}
				else {
					render(rendered);
				}
			}
			// if hash is some path
			else if (hash[0].trim().length) {
				rendered = searchByPath(hash[0]);
	
				if (rendered.length) {
					currentPath = hash[0];
					breadcrumbsUrls = generateBreadcrumbs(hash[0]);
					render(rendered);
				} else {
					currentPath = hash[0];
					breadcrumbsUrls = generateBreadcrumbs(hash[0]);
					render(rendered);
				}
			}
			// if there is no hash
			else {
				currentPath = data.path;
				breadcrumbsUrls.push(data.path);
				render(searchByPath(data.path));
			}
		}
	}
	
	// Splits a file path and turns it into clickable breadcrumbs
	function generateBreadcrumbs(nextDir){
		var path = nextDir.split('/').slice(0);
		for(var i=1;i<path.length;i++){
			path[i] = path[i-1]+ '/' +path[i];
		}
		return path;
	}
	
	// Locates a file by path
	function searchByPath(dir) {
		var path = dir.split('/'),
			demo = response,
			flag = 0;
	
		for(var i=0;i<path.length;i++){
			for(var j=0;j<demo.length;j++){
				if(demo[j].name === path[i]){
					flag = 1;
					demo = demo[j].items;
					break;
				}
			}
		}
	
		demo = flag ? demo : [];
		return demo;
	}
	
	// Recursively search through the file tree
	function searchData(data, searchTerms) {
		data.forEach(function(d){
			if(d.type === 'folder') {
				searchData(d.items,searchTerms);
	
				if(d.name.toLowerCase().match(searchTerms)) {
					folders.push(d);
				}
			} else if(d.type === 'file') {
				if(d.name.toLowerCase().match(searchTerms)) {
					files.push(d);
				}
			}
		});
		
		return {folders: folders, files: files};
	}
	
	
	// Render the HTML for the file manager
	function render(data) {
		var scannedFolders = [],
			scannedFiles = [];
	
		if(Array.isArray(data)) {
			data.forEach(function (d) {
	
				if (d.type === 'folder') {
					scannedFolders.push(d);
				} else if (d.type === 'file') {
					scannedFiles.push(d);
				}
			});
		} else if(typeof data === 'object') {
			scannedFolders = data.folders;
			scannedFiles = data.files;
		}
	
		// Empty the old result and make the new one
		fileList.empty().hide();
	
		if(!scannedFolders.length && !scannedFiles.length) {
			filemanager.find('.nothingfound').show();
		} else {
			filemanager.find('.nothingfound').hide();
		}
	
		if(scannedFolders.length) {
			scannedFolders.forEach(function(f) {
				var itemsLength = f.items.length,
					name = escapeHTML(f.name),
					icon = '<span class="icon folder"></span>';
	
				if(itemsLength) {
					icon = '<span class="icon folder full"></span>';
				}
	
				if(itemsLength == 1) {
					itemsLength += ' item';
				} else if(itemsLength > 1) {
					itemsLength += ' items';
				} else {
					itemsLength = 'Empty';
				}
	
				var folder = $('<li class="folders"><a href="'+ f.path +'" title="'+ f.path +'" class="folders">'+icon+'<span class="name">' + name + '</span> <span class="details">' + itemsLength + '</span></a></li>');
				folder.appendTo(fileList);
			});
		}
	
		if(scannedFiles.length) {
			var idx = 0;
			scannedFiles.forEach(function(f) {
				var fileSize = bytesToSize(f.size),
					name = escapeHTML(f.name),
					fileType = name.split('.'),
					icon = '<span class="icon file"></span>';
	
				fileType = fileType[fileType.length-1];
	
				var sp_icon = '<span class="icon file f-'+fileType+'">.'+fileType+'</span>';
				var sp_name = '<span class="name">' + name + '</span>';
				var sp_details = '<span class="details">' + fileSize + '</span>';

				if (fileType === "mp4") {
					var file = $('<li class="files">' + sp_name + sp_details + '</li>');
					$(file).find('span.name').addClass('vid');
					$(file).find('span.details').addClass('vid');
					var player = $('<video preload="none" class="video-js vjs-default-skin" width="330" height="248" poster="" controls><source src="" type="video/mp4"/></video>');
					player.find('source').attr('src', '/' + f.path);
					var video_id = 'video' + idx++;
					player.attr('id', video_id);
					$(file).append(player);

					file.appendTo(fileList);					
				} else {
					var file = $('<li class="files"><a href="'+ f.path+'" title="'+ f.path +'" class="files">' + sp_icon + sp_name + sp_details + '</a></li>');
					file.appendTo(fileList);
				}

				if (f.icon)
					$(file).addClass("thumbs");
			});
		}
	
		// Generate the breadcrumbs
		var url = '';
	
		if(filemanager.hasClass('searching')){
			url = '<span>Search results: </span>';
			fileList.removeClass('animated');
		} else {
			fileList.addClass('animated');
			breadcrumbsUrls.forEach(function (u, i) {
				var name = u.split('/');
	
				if (i !== breadcrumbsUrls.length - 1) {
					url += '<a href="'+u+'"><span class="folderName">' + name[name.length-1] + '</span></a> <span class="arrow">→</span> ';
				} else {
					url += '<span class="folderName">' + name[name.length-1] + '</span>';
				}
			});
		}
	
		breadcrumbs.text('').append(url);
	
		// Show the generated elements
		fileList.css({display:'inline-block'});

		// Initialisation players
		var deferred = $.Deferred();
		var promise = deferred.promise();
		$('video').each(function(key, elt){
			var player = videojs(elt);

			var addThumb = function(data) {
				player.addThumb(data.time, {
	        		src: data.file,
	    			style: {
	    			      width: '200px',
	    			    }
			   	});
		    };

		    var addPoster = function(data) {
			    console.log(player.id() + ' addPoster');
				player.poster(data.file);
		    };

			//Générer poster image
			promise
				.then(function(){ return getVideoDuration(player) })
				.then(function(data){
					var time_seconds = "00:00:" + Math.trunc(data.duration / 2);
					getThumbAjax(player, time_seconds, addPoster);
				});

			//Plugin de génération des thumbnails
			player.thumbnails({
			      0: {
			          src: ''
			        }
			      });

			//Sauvegarde chemin vidéo
			$(player).data('src', $(player.el()).find('source').attr('src'));

			//Ecoute position souris sur barre de contrôle
			player.on('thumbupdate', function(evt, data){
				var player = this;
				var settings = data.settings;
				var video_id = player.el();
				var time = $(video_id).find("div.vjs-mouse-display").attr("data-current-time");

				getThumbAjax(player, time, addThumb);
		    });

			//Affichage preview vidéo lors du passage de la souris sur son emplacement
			player.on('mouseover', function(){
				if (!player.isFullscreen()) {
					console.log(player.id() + ' mouseover');
					player.controls(false);
	
					//Si preview absente la générer
					if ($(player).data('preview') === undefined) {
						//Vérifier existence de la preview
						$.when(checkVideoPreviewExists(player))
							.then(function(data) {
								if (data.return_value === true) {
									//Sauvegarde chemin de la preview vidéo
									$(player).data('preview', data.file);
									//Preview déjà créée on l'affiche
									player.src($(player).data('preview'));
									player.loop(true);
									player.play();
								} else {
									//Génération preview si une génération n'est pas déjà en cours
									if ($(document).data('requestRunning')) {
								        return;
								    } else
										$(document).data('requestRunning', true);
									
									var deferred = $.Deferred();
									var promise = deferred.promise();
									//Générer la preview video
									promise
										.then(function(){ return getVideoDuration(player) })
										.then(function(data){
											var duration = Math.trunc(data.duration);
											return getVideoPreview(player, duration);
										})
										.then(function(data) {
											//Chemin de la preview vidéo
											player.src(data.file);
											$(player).data('preview', data.file);
											player.loop(true);
											player.play();
	
											$(document).data('requestRunning', false);
										});
					
									deferred.resolve();
								}
							});
					} else {
						//Preview déjà créée on l'affiche
						player.src($(player).data('preview'));
						player.loop(true);
						player.play();
					}
				}
			});

			player.on('mouseleave', function(){
				if ($(player).data('preview') !== undefined && !player.isFullscreen()){
					console.log(player.id() + ' mouseleave');
					player.pause();
					//Restitution chemin vidéo
					player.src($(player).data('src'));
					player.controls(true);
				}
			});

			player.on('click', function(evt){
				if (!player.isFullscreen()) {
					player.controls(true);
					player.src($(player).data('src'));
					player.play();
					player.requestFullscreen();
					evt.preventDefault();
				}
			});

		});

		deferred.resolve();

		$('.vjs-loading-spinner').hide();
	}
	
	// This function escapes special html characters in names
	function escapeHTML(text) {
		return text.replace(/\&/g,'&amp;').replace(/\</g,'&lt;').replace(/\>/g,'&gt;');
	}
	
	// Convert file sizes from bytes to human readable units
	function bytesToSize(bytes) {
		var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
		if (bytes == 0) return '0 Bytes';
		var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
		return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
	}

});

var getThumbAjax = function(player, time, callback) {
	var video_id = player.el();
	var file = $(video_id).find('video').attr('src');
	
	if ($(video_id).data('requestRunning')) {
        return;
    } else
    	$(video_id).data('requestRunning', true);
	
	console.log(player.id() + ' getThumbAjax');
	return $.ajax({
        type: "GET",
        url: "getThumbAjax",
        data: { file: file, time: time },
        success: function(data) {
    		if (typeof callback === 'function') {
        		callback(data);
    		}
        },
        complete: function() {
        	$(video_id).data('requestRunning', false);
        }
    });
}

var getVideoDuration = function(player, callback) {
	console.log(player.id() + ' getVideoDuration');
	var video_id = player.el();
	var file = $(video_id).find('video').attr('src');

	return $.ajax({
        type: "GET",
        url: "getVideoDuration",
        data: { file: file },
        success: function(data) {
    		if (typeof callback === 'function') {
        		callback(data);
    		}
        },
    });
}

var getVideoPreview = function(player, duration) {
	console.log(player.id() + ' getVideoPreview');
	var video_id = player.el();
	var file = $(video_id).find('video').attr('src');

	return $.ajax({
        type: "GET",
        url: "getVideoPreview",
        data: { file: file, duration: duration},
    });
}

var checkVideoPreviewExists = function(player) {
	console.log(player.id() + ' checkVideoPreviewExists');
	var video_id = player.el();
	var file = $(video_id).find('video').attr('src');

	return $.ajax({
        type: "GET",
        url: "checkVideoPreviewExists",
        data: { file: file },
    });
}

</script>

<div class="filemanager">

	<div class="search">
		<input type="search" placeholder="Find a file.." />
	</div>

	<div class="breadcrumbs"></div>

	<ul class="data"></ul>

	<div class="nothingfound">
		<div class="nofiles"></div>
		<span>No files here.</span>
	</div>

</div>
